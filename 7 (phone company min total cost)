#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Edge {
    int src, dest, cost;
    bool operator<(const Edge& other) const {
        return cost < other.cost;
    }
};

class DSU {
    vector<int> parent, rank;
public:
    DSU(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for(int i = 0; i < n; i++) parent[i] = i;
    }

    int find(int x) {
        if(parent[x] != x) parent[x] = find(parent[x]); // path compression
        return parent[x];
    }

    bool unite(int x, int y) {
        int xr = find(x), yr = find(y);
        if(xr == yr) return false;
        if(rank[xr] < rank[yr])
            parent[xr] = yr;
        else if(rank[xr] > rank[yr])
            parent[yr] = xr;
        else {
            parent[yr] = xr;
            rank[xr]++;
        }
        return true;
    }
};

int main() {
    int offices = 5; // number of nodes
    vector<Edge> edges = {
        {0, 1, 10},
        {0, 2,6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };

    sort(edges.begin(), edges.end());

    DSU dsu(offices);
    int mstCost = 0;
    vector<Edge> mst;

    for(auto& e : edges) {
        if(dsu.unite(e.src, e.dest)) {
            mstCost += e.cost;
            mst.push_back(e);
        }
    }

    cout << "Minimum cost to connect all offices: " << mstCost << "\n";
    cout << "Edges in MST:\n";
    for(auto& e : mst) {
        cout << e.src << " - " << e.dest << " (Cost: " << e.cost << ")\n";
    }

    return 0;
}
