#include <iostream>
#include <stack>
#include <cctype>
#include <string>
using namespace std;

// Tree node for expression
struct Node {
    char data;
    Node* left;
    Node* right;
    Node(char val) : data(val), left(nullptr), right(nullptr) {}
};

// Function to define operator precedence
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

// Convert infix to postfix
string infixToPostfix(const string& expr) {
    stack<char> opStack;
    string postfix;

    for (char ch : expr) {
        if (isalnum(ch)) {
            postfix += ch;
        } else if (ch == '(') {
            opStack.push(ch);
        } else if (ch == ')') {
            while (!opStack.empty() && opStack.top() != '(') {
                postfix += opStack.top();
                opStack.pop();
            }
            opStack.pop(); // Remove '('
        } else { // Operator
            while (!opStack.empty() && precedence(ch) <= precedence(opStack.top())) {
                postfix += opStack.top();
                opStack.pop();
            }
            opStack.push(ch);
        }
    }

    while (!opStack.empty()) {
        postfix += opStack.top();
        opStack.pop();
    }

    return postfix;
}

// Build expression tree from postfix
Node* buildExpressionTree(const string& postfix) {
    stack<Node*> st;
    for (char ch : postfix) {
        if (isalnum(ch)) {
            st.push(new Node(ch));
        } else {
            Node* right = st.top(); st.pop();
            Node* left = st.top(); st.pop();
            Node* newNode = new Node(ch);
            newNode->left = left;
            newNode->right = right;
            st.push(newNode);
        }
    }
    return st.top();
}

// Non-recursive postorder traversal
void postorderNonRecursive(Node* root) {
    if (!root) return;

    stack<Node*> s1, s2;
    s1.push(root);

    while (!s1.empty()) {
        Node* curr = s1.top(); s1.pop();
        s2.push(curr);
        if (curr->left) s1.push(curr->left);
        if (curr->right) s1.push(curr->right);
    }

    cout << "Postorder (non-recursive): ";
    while (!s2.empty()) {
        cout << s2.top()->data << " ";
        s2.pop();
    }
    cout << endl;
}

// Inorder traversal (recursive, to show the expression order)
void inorder(Node* root) {
    if (!root) return;
    if (root->left) cout << "(";
    inorder(root->left);
    cout << root->data;
    inorder(root->right);
    if (root->right) cout << ")";
}

int main() {
    string expr = "a-b*c-d/e+f";
    string postfix = infixToPostfix(expr);

    cout << "Infix Expression: " << expr << endl;
    cout << "Postfix Expression: " << postfix << endl;

    Node* root = buildExpressionTree(postfix);

    cout << "Inorder Expression: ";
    inorder(root);
    cout << endl;

    postorderNonRecursive(root);

    return 0;
}
