#include <iostream>
#include <unordered_map>
#include <vector>
#include <stack>
#include <string>
#include <set>
using namespace std;

class Graph {
    unordered_map<string, vector<pair<string, int>>> adjList; // city -> [(destination, cost)]
    set<string> cities;

public:
    void addFlight(string from, string to, int cost) {
        adjList[from].push_back({to, cost});
        adjList[to].push_back({from, cost});  // assuming undirected (bidirectional) flight path
        cities.insert(from);
        cities.insert(to);
    }

    void displayGraph() {
        cout << "Flight Graph (Adjacency List):\n";
        for (auto& pair : adjList) {
            cout << pair.first << " -> ";
            for (auto& neighbor : pair.second) {
                cout << "(" << neighbor.first << ", cost: " << neighbor.second << ") ";
            }
            cout << endl;
        }
    }

    // DFS to check connectivity
    void DFS(string start, set<string>& visited) {
        stack<string> s;
        s.push(start);
        while (!s.empty()) {
            string curr = s.top(); s.pop();
            if (!visited.count(curr)) {
                visited.insert(curr);
                for (auto& neighbor : adjList[curr]) {
                    if (!visited.count(neighbor.first))
                        s.push(neighbor.first);
                }
            }
        }
    }

    bool isConnected() {
        if (cities.empty()) return true;
        set<string> visited;
        DFS(*cities.begin(), visited);
        return visited.size() == cities.size();
    }
};

int main() {
    Graph g;

    // Add cities and flights (edges with cost)
    g.addFlight("Pune", "Mumbai", 120);
    g.addFlight("Mumbai", "Delhi", 180);
    g.addFlight("Delhi", "Bangalore", 200);
    g.addFlight("Bangalore", "Chennai", 100);
    // g.addFlight("Hyderabad", "Kolkata", 150); // Uncomment this to make graph disconnected

    g.displayGraph();

    if (g.isConnected())
        cout << "\nThe flight network is connected.\n";
    else
        cout << "\nThe flight network is NOT connected.\n";

    return 0;
}
