import random

class Node:
    def __init__(self, val, level):
        self.val = val
        self.forward = [None] * (level + 1)

class SkipList:
    def __init__(self, max_level=4):
        self.max_level = max_level
        self.head = Node(-float('inf'), max_level)
        self.level = 0

    def random_level(self):
        lvl = 0
        while random.random() < 0.5 and lvl < self.max_level:
            lvl += 1
        return lvl

    def insert(self, val):
        update = [None] * (self.max_level + 1)
        curr = self.head
        for i in reversed(range(self.level + 1)):
            while curr.forward[i] and curr.forward[i].val < val:
                curr = curr.forward[i]
            update[i] = curr
        lvl = self.random_level()
        if lvl > self.level:
            for i in range(self.level + 1, lvl + 1):
                update[i] = self.head
            self.level = lvl
        new = Node(val, lvl)
        for i in range(lvl + 1):
            new.forward[i] = update[i].forward[i]
            update[i].forward[i] = new

    def find_closest(self, target):
        curr = self.head
        for i in reversed(range(self.level + 1)):
            while curr.forward[i] and curr.forward[i].val < target:
                curr = curr.forward[i]
        lo = curr.val
        hi = curr.forward[0].val if curr.forward[0] else float('inf')
        return lo if abs(lo - target) <= abs(hi - target) else hi

# --- Example usage ---
elements = [10, 20, 30, 40, 50, 60]
s = SkipList()
for e in elements:
    s.insert(e)

x = int(input("Enter a number to find closest: "))
print("Closest value:", s.find_closest(x))
