#include <iostream>
#include <vector>
#include <iomanip>
using namespace std;

void optimalBST(vector<double>& p, int n) {
    vector<vector<double>> cost(n + 2, vector<double>(n + 1, 0)); // cost[i][j]: min cost from i to j
    vector<vector<int>> root(n + 1, vector<int>(n + 1, 0));       // root[i][j]: root index for i to j
    vector<vector<double>> weight(n + 2, vector<double>(n + 1, 0)); // weight[i][j]: sum of p[i..j]

    for (int i = 1; i <= n + 1; i++) cost[i][i - 1] = 0; // empty subtree
    for (int i = 1; i <= n; i++) {
        weight[i][i] = p[i - 1];
        cost[i][i] = p[i - 1];
        root[i][i] = i;
    }

    for (int length = 2; length <= n; length++) {
        for (int i = 1; i <= n - length + 1; i++) {
            int j = i + length - 1;
            weight[i][j] = weight[i][j - 1] + p[j - 1];
            cost[i][j] = 1e9;

            for (int r = i; r <= j; r++) {
                double c = cost[i][r - 1] + cost[r + 1][j] + weight[i][j];
                if (c < cost[i][j]) {
                    cost[i][j] = c;
                    root[i][j] = r;
                }
            }
        }
    }

    cout << "Minimum Search Cost: " << cost[1][n] << endl;

    // Optional: display root matrix
    cout << "\nOptimal Roots for Subtrees:\n";
    for (int i = 1; i <= n; i++) {
        for (int j = i; j <= n; j++) {
            cout << "Root[" << i << "," << j << "] = k" << root[i][j] << "\n";
        }
    }
}

int main() {
    // Example: 4 keys with their probabilities
    vector<double> probabilities = {0.1, 0.2, 0.4, 0.3}; // p1, p2, p3, p4
    int n = probabilities.size();

    optimalBST(probabilities, n);

    return 0;
}
