#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    bool rightThread;

    Node(int val) {
        data = val;
        left = right = nullptr;
        rightThread = false;
    }
};

// Insert into a regular binary tree (for testing)
Node* insert(Node* root, int key) {
    if (!root) return new Node(key);
    if (key < root->data)
        root->left = insert(root->left, key);
    else
        root->right = insert(root->right, key);
    return root;
}

// Helper for threading: performs reverse inorder traversal
void createThreaded(Node* root, Node*& prev) {
    if (!root) return;

    createThreaded(root->right, prev);

    if (!root->right) {
        root->right = prev;
        root->rightThread = true;
    }

    prev = root;
    createThreaded(root->left, prev);
}

// Wrapper to initiate threading
void convertToThreaded(Node* root) {
    Node* prev = nullptr;
    createThreaded(root, prev);
}

// Inorder traversal using threading
void inorderThreaded(Node* root) {
    Node* curr = root;
    while (curr && curr->left) curr = curr->left;

    while (curr) {
        cout << curr->data << " ";
        if (curr->rightThread)
            curr = curr->right;
        else {
            curr = curr->right;
            while (curr && curr->left)
                curr = curr->left;
        }
    }
}

int main() {
    Node* root = nullptr;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 70);
    insert(root, 20);
    insert(root, 40);
    insert(root, 60);
    insert(root, 80);

    convertToThreaded(root);

    cout << "Inorder traversal using threaded binary tree:\n";
    inorderThreaded(root);

    return 0;
}
