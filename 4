class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

# Helper to check operator precedence
def precedence(op):
    if op in ('+', '-'):
        return 1
    elif op in ('*', '/'):
        return 2
    return 0

# Convert infix expression to postfix using Shunting Yard Algorithm
def infix_to_postfix(expr):
    output = []
    stack = []
    for ch in expr:
        if ch.isalnum():  # operand
            output.append(ch)
        elif ch in "+-*/":
            while stack and precedence(stack[-1]) >= precedence(ch):
                output.append(stack.pop())
            stack.append(ch)
    while stack:
        output.append(stack.pop())
    return output

# Build expression tree from postfix
def build_tree(postfix):
    stack = []
    for ch in postfix:
        node = Node(ch)
        if ch in "+-*/":
            node.right = stack.pop()
            node.left = stack.pop()
        stack.append(node)
    return stack[-1]

# Inorder traversal (recursive, for simplicity)
def inorder(node):
    if node:
        if node.left or node.right:
            print("(", end="")
        inorder(node.left)
        print(node.val, end="")
        inorder(node.right)
        if node.left or node.right:
            print(")", end="")

# Postorder traversal (non-recursive using two stacks)
def postorder_non_recursive(root):
    if root is None:
        return
    s1, s2 = [root], []
    while s1:
        node = s1.pop()
        s2.append(node)
        if node.left:
            s1.append(node.left)
        if node.right:
            s1.append(node.right)
    print("Postorder (non-recursive):", end=" ")
    while s2:
        print(s2.pop().val, end=" ")
    print()

# --- Main Logic ---
expr = "a-b*c-d/e+f"  # given infix expression
postfix = infix_to_postfix(expr)
root = build_tree(postfix)

print("Inorder expression:")
inorder(root)
print()
postorder_non_recursive(root)
