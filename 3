#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = right = nullptr;
    }
};

// Insert node in BST
Node* insert(Node* root, int value) {
    if (!root) return new Node(value);
    if (value < root->data)
        root->left = insert(root->left, value);
    else
        root->right = insert(root->right, value);
    return root;
}

// Find height (longest path)
int longestPath(Node* root) {
    if (!root) return 0;
    int left = longestPath(root->left);
    int right = longestPath(root->right);
    return max(left, right) + 1;
}

// Find minimum value
int findMin(Node* root) {
    if (!root) return -1; // Or throw error
    while (root->left) root = root->left;
    return root->data;
}

// Mirror the tree
void mirror(Node* root) {
    if (!root) return;
    swap(root->left, root->right);
    mirror(root->left);
    mirror(root->right);
}

// Search a value
bool search(Node* root, int value) {
    if (!root) return false;
    if (root->data == value) return true;
    else if (value < root->data)
        return search(root->left, value);
    else
        return search(root->right, value);
}

// Inorder traversal
void inorder(Node* root) {
    if (!root) return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

int main() {
    Node* root = nullptr;
    int values[] = {50, 30, 70, 20, 40, 60, 80};  // Example input order
    for (int val : values)
        root = insert(root, val);

    cout << "Inorder traversal of BST: ";
    inorder(root);
    cout << "\n";

    // Insert new node
    root = insert(root, 25);
    cout << "After inserting 25, inorder: ";
    inorder(root);
    cout << "\n";

    // Longest path (height)
    cout << "Height of tree (longest path): " << longestPath(root) << "\n";

    // Minimum value
    cout << "Minimum value in BST: " << findMin(root) << "\n";

    // Mirror the tree
    mirror(root);
    cout << "Inorder after mirroring: ";
    inorder(root);
    cout << "\n";

    // Search value
    int key = 40;
    cout << "Searching " << key << ": " << (search(root, key) ? "Found" : "Not Found") << "\n";

    return 0;
}
